{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"devops/","text":"devops","title":"Index"},{"location":"devops/#devops","text":"","title":"devops"},{"location":"golang/","text":"golang \u6253\u5305 \u6253\u5305\u64cd\u4f5c\u4ee5... \u5f00\u5934\uff0c\u5982... Type func append ( slice [] Type , elems ... Type ) [] Type elems ...Type \u6307\u7684\u662f\u5c06\u6240\u6709\u5165\u53c2\u53d8\u91cf\u6253\u5305\u8fdb\u9996\u4e2a\u53c2\u6570\u4e4b\u540e\u7684 elems \u5207\u7247\u4e2d \u89e3\u5305 \u89e3\u5305\u64cd\u4f5c\u7b26\u4ee5... \u7ed3\u675f\u5982 slice ... var slice1 = [] int { 1 , 2 , 3 , 4 } var slice2 = [] int { 5 , 6 } slice3 := append ( slice1 , slice2 ... ) fmt . Println ( slice3 ) [1 2 3 4 5 6]","title":"golang"},{"location":"golang/#golang","text":"","title":"golang"},{"location":"golang/#_1","text":"\u6253\u5305\u64cd\u4f5c\u4ee5... \u5f00\u5934\uff0c\u5982... Type func append ( slice [] Type , elems ... Type ) [] Type elems ...Type \u6307\u7684\u662f\u5c06\u6240\u6709\u5165\u53c2\u53d8\u91cf\u6253\u5305\u8fdb\u9996\u4e2a\u53c2\u6570\u4e4b\u540e\u7684 elems \u5207\u7247\u4e2d","title":"\u6253\u5305"},{"location":"golang/#_2","text":"\u89e3\u5305\u64cd\u4f5c\u7b26\u4ee5... \u7ed3\u675f\u5982 slice ... var slice1 = [] int { 1 , 2 , 3 , 4 } var slice2 = [] int { 5 , 6 } slice3 := append ( slice1 , slice2 ... ) fmt . Println ( slice3 ) [1 2 3 4 5 6]","title":"\u89e3\u5305"},{"location":"golang/file-system/","text":"filesystem","title":"Index"},{"location":"golang/file-system/#filesystem","text":"","title":"filesystem"},{"location":"golang/web-server/","text":"golang web-server design server graceful shutdown and double-check forced shutdown package server import ( \"context\" \"github.com/gin-gonic/gin\" \"go-snippets/internal/pkg/log\" \"net/http\" \"os\" \"os/signal\" \"sync\" \"syscall\" \"time\" ) type Server struct { Router * gin . Engine Addr string } func New ( router * gin . Engine , addr string ) * Server { return & Server { Router : router , Addr : addr , } } func ( s * Server ) httpServer ( stop <- chan struct {}, group * sync . WaitGroup ) { defer group . Done () srv := & http . Server { Addr : s . Addr , Handler : s . Router , } // Initializing the server in a goroutine so that // it won't block the graceful shutdown handling below // http server go func () { log . Infof ( \"server listen on %v\" , srv . Addr ) if err := srv . ListenAndServe (); err != nil && err != http . ErrServerClosed { log . Fatalf ( \"listen: %s\\n\" , err ) } }() <- stop // Wait for interrupt signal to gracefully shutdown the server with // a timeout of 5 seconds. ctx , cancel := context . WithTimeout ( context . Background (), 5 * time . Second ) defer cancel () if err := srv . Shutdown ( ctx ); err != nil { log . Errorf ( \"server shutdown failed: %v\" , err . Error ()) } else { time . Sleep ( 100 * time . Second ) log . Info ( \"http server shutdown successfully\" ) } } func ( s * Server ) ServeAndListen () error { // \u7edf\u4e00\u5173\u673a\u4fe1\u53f7\uff0c\u7528\u4e8e\u901a\u77e5\u6240\u6709server\u505c\u6b62\u670d\u52a1\uff0c\u4f8b\u5982http\u3001grpc\u7b49 stop := make ( chan struct {}) // \u7528\u4e8e\u7b49\u5f85\u6240\u6709\u670d\u52a1\u4f18\u96c5\u5173\u673a group := sync . WaitGroup {} // \u6bcf\u542f\u52a8\u4e00\u4e2aserver\uff0c\u5c31\u6dfb\u52a01 group . Add ( 1 ) go s . httpServer ( stop , & group ) // \u7cfb\u7edf\u5173\u673a\u4fe1\u53f7\uff0c\u7531\u5916\u90e8\u89e6\u53d1\uff0c\u4f8b\u5982ctrl+c\u7b49 shutdownHandler := make ( chan os . Signal , 2 ) // \u8865\u8d27\u6240\u6709\u7684\u6253\u65ad\u4fe1\u540e // kill -2 is syscall.SIGINT // kill -9 is syscall.SIGKILL but can't be catch, so don't need add it signal . Notify ( shutdownHandler , syscall . SIGINT , syscall . SIGTERM ) go func () { // \u7b2c\u4e00\u6b21\u5173\u673a\u4fe1\u53f7\uff0c\u4f18\u96c5\u7684\u5173\u673a <- shutdownHandler log . Info ( \"Shutting down server...\" ) // The context is used to inform the server it has 5 seconds to finish // the request it is currently handling close ( stop ) // \u7b2c\u4e8c\u6b21\u5173\u673a\u4fe1\u53f7\uff0c\u5f3a\u5236\u9000\u51fa <- shutdownHandler log . Warn ( \"Forced shutdown server...\" ) os . Exit ( 1 ) // second signal. Exit directly. }() }() group . Wait () return nil } s","title":"golang web-server design"},{"location":"golang/web-server/#golang-web-server-design","text":"","title":"golang web-server design"},{"location":"golang/web-server/#server-graceful-shutdown-and-double-check-forced-shutdown","text":"package server import ( \"context\" \"github.com/gin-gonic/gin\" \"go-snippets/internal/pkg/log\" \"net/http\" \"os\" \"os/signal\" \"sync\" \"syscall\" \"time\" ) type Server struct { Router * gin . Engine Addr string } func New ( router * gin . Engine , addr string ) * Server { return & Server { Router : router , Addr : addr , } } func ( s * Server ) httpServer ( stop <- chan struct {}, group * sync . WaitGroup ) { defer group . Done () srv := & http . Server { Addr : s . Addr , Handler : s . Router , } // Initializing the server in a goroutine so that // it won't block the graceful shutdown handling below // http server go func () { log . Infof ( \"server listen on %v\" , srv . Addr ) if err := srv . ListenAndServe (); err != nil && err != http . ErrServerClosed { log . Fatalf ( \"listen: %s\\n\" , err ) } }() <- stop // Wait for interrupt signal to gracefully shutdown the server with // a timeout of 5 seconds. ctx , cancel := context . WithTimeout ( context . Background (), 5 * time . Second ) defer cancel () if err := srv . Shutdown ( ctx ); err != nil { log . Errorf ( \"server shutdown failed: %v\" , err . Error ()) } else { time . Sleep ( 100 * time . Second ) log . Info ( \"http server shutdown successfully\" ) } } func ( s * Server ) ServeAndListen () error { // \u7edf\u4e00\u5173\u673a\u4fe1\u53f7\uff0c\u7528\u4e8e\u901a\u77e5\u6240\u6709server\u505c\u6b62\u670d\u52a1\uff0c\u4f8b\u5982http\u3001grpc\u7b49 stop := make ( chan struct {}) // \u7528\u4e8e\u7b49\u5f85\u6240\u6709\u670d\u52a1\u4f18\u96c5\u5173\u673a group := sync . WaitGroup {} // \u6bcf\u542f\u52a8\u4e00\u4e2aserver\uff0c\u5c31\u6dfb\u52a01 group . Add ( 1 ) go s . httpServer ( stop , & group ) // \u7cfb\u7edf\u5173\u673a\u4fe1\u53f7\uff0c\u7531\u5916\u90e8\u89e6\u53d1\uff0c\u4f8b\u5982ctrl+c\u7b49 shutdownHandler := make ( chan os . Signal , 2 ) // \u8865\u8d27\u6240\u6709\u7684\u6253\u65ad\u4fe1\u540e // kill -2 is syscall.SIGINT // kill -9 is syscall.SIGKILL but can't be catch, so don't need add it signal . Notify ( shutdownHandler , syscall . SIGINT , syscall . SIGTERM ) go func () { // \u7b2c\u4e00\u6b21\u5173\u673a\u4fe1\u53f7\uff0c\u4f18\u96c5\u7684\u5173\u673a <- shutdownHandler log . Info ( \"Shutting down server...\" ) // The context is used to inform the server it has 5 seconds to finish // the request it is currently handling close ( stop ) // \u7b2c\u4e8c\u6b21\u5173\u673a\u4fe1\u53f7\uff0c\u5f3a\u5236\u9000\u51fa <- shutdownHandler log . Warn ( \"Forced shutdown server...\" ) os . Exit ( 1 ) // second signal. Exit directly. }() }() group . Wait () return nil } s","title":"server graceful shutdown and double-check forced shutdown"},{"location":"java/","text":"java","title":"Index"},{"location":"java/#java","text":"","title":"java"},{"location":"kubernetes/","text":"kubernetes","title":"Index"},{"location":"kubernetes/#kubernetes","text":"","title":"kubernetes"},{"location":"kubernetes/deployment/","text":"deployment","title":"Deployment"},{"location":"kubernetes/deployment/#deployment","text":"","title":"deployment"},{"location":"python/","text":"python \u6253\u5305 \u6253\u5305\u64cd\u4f5c\u4ee5... \u5f00\u5934\uff0c\u5982... Type func append ( slice [] Type , elems ... Type ) [] Type elems ...Type \u6307\u7684\u662f\u5c06\u6240\u6709\u5165\u53c2\u53d8\u91cf\u6253\u5305\u8fdb\u9996\u4e2a\u53c2\u6570\u4e4b\u540e\u7684 elems \u5207\u7247\u4e2d \u89e3\u5305 \u89e3\u5305\u64cd\u4f5c\u7b26\u4ee5... \u7ed3\u675f\u5982 slice ... var slice1 = []{ 1 , 2 , 3 , 4 } var slice2 = []{ 5 , 6 } append ( slice1 , slice2 ... )","title":"python"},{"location":"python/#python","text":"","title":"python"},{"location":"python/#_1","text":"\u6253\u5305\u64cd\u4f5c\u4ee5... \u5f00\u5934\uff0c\u5982... Type func append ( slice [] Type , elems ... Type ) [] Type elems ...Type \u6307\u7684\u662f\u5c06\u6240\u6709\u5165\u53c2\u53d8\u91cf\u6253\u5305\u8fdb\u9996\u4e2a\u53c2\u6570\u4e4b\u540e\u7684 elems \u5207\u7247\u4e2d","title":"\u6253\u5305"},{"location":"python/#_2","text":"\u89e3\u5305\u64cd\u4f5c\u7b26\u4ee5... \u7ed3\u675f\u5982 slice ... var slice1 = []{ 1 , 2 , 3 , 4 } var slice2 = []{ 5 , 6 } append ( slice1 , slice2 ... )","title":"\u89e3\u5305"},{"location":"shell/","text":"shell","title":"Index"},{"location":"shell/#shell","text":"","title":"shell"}]}